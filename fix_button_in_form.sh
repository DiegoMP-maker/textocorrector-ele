#!/bin/bash
# Script para implementar la soluci√≥n al problema de botones en formularios

set -e  # Parar en caso de error

echo "==== Soluci√≥n al problema st.button() en st.form() ===="
echo "Iniciando script de implementaci√≥n autom√°tica..."

# Directorio actual
WORKDIR=$(pwd)
APP_FILE="$WORKDIR/streamlit_app.py"
BACKUP_FILE="$WORKDIR/streamlit_app.py.bak.$(date +%Y%m%d%H%M%S)"
TEMP_DIR="$WORKDIR/.temp_fix"
NEW_APP_FILE="$TEMP_DIR/app_final.py"

# Verificar que el archivo existe
if [ ! -f "$APP_FILE" ]; then
  echo "‚ùå Error: No se encuentra el archivo streamlit_app.py"
  echo "Aseg√∫rate de ejecutar este script desde el directorio ra√≠z del proyecto"
  exit 1
fi

# Crear directorio temporal si no existe
echo "üîß Creando directorio temporal..."
mkdir -p "$TEMP_DIR"

# Hacer backup del archivo original
echo "üì¶ Creando copia de seguridad en $BACKUP_FILE"
cp "$APP_FILE" "$BACKUP_FILE"
echo "‚úÖ Copia de seguridad creada"

# Crear archivo temporal con la funci√≥n ui_export_options_redise√±ado
echo "‚úèÔ∏è Creando nueva funci√≥n ui_export_options_redise√±ado..."
cat > "$TEMP_DIR/ui_export_options_redise√±ado.py" << 'EOF'
def ui_export_options_redise√±ado(data):
    """
    Versi√≥n completamente redise√±ada del sistema de exportaci√≥n usando un enfoque 
    de flujo secuencial sin formularios anidados.
    
    Esta implementaci√≥n evita por completo el problema de botones en formularios 
    mediante un dise√±o que separa la selecci√≥n del formato y la generaci√≥n del archivo.

    Args:
        data: Resultados de la correcci√≥n
    """
    st.header("üìä Exportar informe")

    # Verificaci√≥n b√°sica de datos
    if not isinstance(data, dict):
        st.warning("‚ö†Ô∏è No hay datos suficientes para exportar.")
        return

    # Extraer datos para la exportaci√≥n
    nombre = get_session_var("usuario_actual", "Usuario")
    nivel = get_session_var("nivel_estudiante", "intermedio")
    fecha = datetime.now().strftime("%Y-%m-%d %H:%M")
    texto_original = get_session_var("ultimo_texto", "")
    texto_corregido = data.get("texto_corregido", "")
    errores_obj = data.get("errores", {})
    analisis_contextual = data.get("analisis_contextual", {})
    consejo_final = data.get("consejo_final", "")

    # PASO 1: Selecci√≥n del formato de exportaci√≥n
    st.write("Selecciona el formato en el que deseas exportar el informe:")
    
    formato_cols = st.columns(3)
    with formato_cols[0]:
        word_selected = st.checkbox("Documento Word (DOCX)", key="select_docx", value=True)
    with formato_cols[1]:
        html_selected = st.checkbox("P√°gina web (HTML)", key="select_html")
    with formato_cols[2]:
        csv_selected = st.checkbox("Datos CSV", key="select_csv")
    
    # PASO 2: Generaci√≥n de informes seg√∫n selecci√≥n
    if st.button("Preparar informes seleccionados", key="prepare_exports"):
        if not (word_selected or html_selected or csv_selected):
            st.warning("Por favor, selecciona al menos un formato para exportar.")
            return
            
        # Contenedor para los informes generados
        with st.container():
            st.subheader("Informes generados:")
            
            # Generar Word si est√° seleccionado
            if word_selected:
                word_container = st.container()
                with word_container:
                    st.write("**Documento Word (DOCX)**")
                    with st.spinner("Generando documento Word..."):
                        docx_buffer = generar_informe_docx(
                            nombre, nivel, fecha, texto_original, texto_corregido,
                            errores_obj, analisis_contextual, consejo_final
                        )
                        
                        if docx_buffer:
                            nombre_archivo = f"informe_{nombre.replace(' ', '_')}_{fecha.replace(':', '_').replace(' ', '_')}.docx"
                            st.download_button(
                                label="üì• Descargar documento Word",
                                data=docx_buffer,
                                file_name=nombre_archivo,
                                mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                                key="docx_download_final"
                            )
                            st.success("‚úÖ Documento Word generado correctamente")
                        else:
                            st.error("‚ùå No se pudo generar el documento Word")
                
                st.divider()
            
            # Generar HTML si est√° seleccionado
            if html_selected:
                html_container = st.container()
                with html_container:
                    st.write("**P√°gina Web (HTML)**")
                    with st.spinner("Generando HTML..."):
                        html_content = generar_informe_html(
                            nombre, nivel, fecha, texto_original, texto_corregido,
                            analisis_contextual, consejo_final
                        )
                        
                        if html_content:
                            html_bytes = html_content.encode()
                            nombre_archivo = f"informe_{nombre.replace(' ', '_')}_{fecha.replace(':', '_').replace(' ', '_')}.html"
                            
                            st.download_button(
                                label="üì• Descargar p√°gina HTML",
                                data=html_bytes,
                                file_name=nombre_archivo,
                                mime="text/html",
                                key="html_download_final"
                            )
                            st.success("‚úÖ Documento HTML generado correctamente")
                            
                            # Vista previa
                            with st.expander("Previsualizar HTML", expanded=False):
                                sanitized_html = html_content.replace('"', '&quot;')
                                st.markdown(
                                    f'<iframe srcdoc="{sanitized_html}" width="100%" height="600" style="border: 1px solid #ddd; border-radius: 5px;"></iframe>',
                                    unsafe_allow_html=True
                                )
                        else:
                            st.error("‚ùå No se pudo generar el documento HTML")
                
                st.divider()
            
            # Generar CSV si est√° seleccionado
            if csv_selected:
                csv_container = st.container()
                with csv_container:
                    st.write("**Datos CSV**")
                    with st.spinner("Generando CSV..."):
                        csv_buffer = generar_csv_analisis(
                            nombre, nivel, fecha, data
                        )
                        
                        if csv_buffer:
                            nombre_archivo = f"datos_{nombre.replace(' ', '_')}_{fecha.replace(':', '_').replace(' ', '_')}.csv"
                            st.download_button(
                                label="üì• Descargar CSV",
                                data=csv_buffer,
                                file_name=nombre_archivo,
                                mime="text/csv",
                                key="csv_download_final"
                            )
                            st.success("‚úÖ Archivo CSV generado correctamente")
                        else:
                            st.error("‚ùå No se pudo generar el archivo CSV")
EOF
echo "‚úÖ Nueva funci√≥n creada"

# Buscar la funci√≥n ui_show_correction_results y modificarla para usar ui_export_options_redise√±ado
echo "üîç Localizando referencias a ui_export_options_tabs..."

# Crear el patr√≥n de b√∫squeda y reemplazo
SEARCH_PATTERN="ui_export_options_tabs(result)"
REPLACE_PATTERN="ui_export_options_redise√±ado(result)"

# Verificar que el patr√≥n existe en el archivo
if ! grep -q "$SEARCH_PATTERN" "$APP_FILE"; then
  echo "‚ö†Ô∏è Advertencia: No se encontr√≥ el patr√≥n exacto '$SEARCH_PATTERN'"
  echo "Intentando buscar patrones similares..."
  
  # Buscar patrones similares
  if grep -q "ui_export_options_tabs" "$APP_FILE"; then
    echo "‚úÖ Se encontr√≥ una referencia a ui_export_options_tabs"
    SEARCH_PATTERN="ui_export_options_tabs"
    REPLACE_PATTERN="ui_export_options_redise√±ado"
  else
    echo "‚ùå Error: No se encontr√≥ ninguna referencia a ui_export_options_tabs"
    echo "Abortando script. Por favor, realiza los cambios manualmente."
    exit 1
  fi
fi

# Crear un archivo temporal con el reemplazo
echo "üîÑ Reemplazando referencias a ui_export_options_tabs..."
sed "s/$SEARCH_PATTERN/$REPLACE_PATTERN/g" "$APP_FILE" > "$TEMP_DIR/app_modified.py"

# Verificar que el reemplazo se realiz√≥ correctamente
if ! grep -q "$REPLACE_PATTERN" "$TEMP_DIR/app_modified.py"; then
  echo "‚ùå Error: El reemplazo no se realiz√≥ correctamente"
  echo "Abortando script. Por favor, realiza los cambios manualmente."
  exit 1
fi

echo "‚úÖ Referencias reemplazadas correctamente"

# Buscar la posici√≥n para a√±adir la nueva funci√≥n ui_export_options_redise√±ado
echo "üîç Buscando la posici√≥n para a√±adir la nueva funci√≥n..."

# Buscar el bloque de la funci√≥n ui_export_options_tabs
START_LINE=$(grep -n "def ui_export_options_tabs" "$TEMP_DIR/app_modified.py" | cut -d':' -f1)
if [ -z "$START_LINE" ]; then
  echo "‚ùå Error: No se encontr√≥ la funci√≥n ui_export_options_tabs"
  echo "Intentando encontrar un lugar adecuado..."
  
  # Estrategia alternativa: buscar la funci√≥n ui_show_correction_results
  START_LINE=$(grep -n "def ui_show_correction_results" "$TEMP_DIR/app_modified.py" | cut -d':' -f1)
  
  if [ -z "$START_LINE" ]; then
    echo "‚ùå Error: No se pudo encontrar un lugar adecuado para a√±adir la funci√≥n"
    echo "Abortando script. Por favor, realiza los cambios manualmente."
    exit 1
  fi
  
  echo "‚úÖ Se utilizar√° la l√≠nea despu√©s de ui_show_correction_results"
  # Encontrar el final de ui_show_correction_results
  END_LINE=$((START_LINE + 1))
  while read -r line; do
    if [[ "$line" =~ ^def\ [a-zA-Z_][a-zA-Z0-9_]*\( ]]; then
      break
    fi
    END_LINE=$((END_LINE + 1))
  done < <(tail -n +$((START_LINE + 1)) "$TEMP_DIR/app_modified.py")
else
  echo "‚úÖ Funci√≥n ui_export_options_tabs encontrada en la l√≠nea $START_LINE"
  
  # Encontrar el final de la funci√≥n ui_export_options_tabs
  END_LINE=$((START_LINE + 1))
  while read -r line; do
    if [[ "$line" =~ ^def\ [a-zA-Z_][a-zA-Z0-9_]*\( ]]; then
      break
    fi
    END_LINE=$((END_LINE + 1))
  done < <(tail -n +$((START_LINE + 1)) "$TEMP_DIR/app_modified.py")
fi

echo "‚úÖ Posici√≥n para a√±adir la nueva funci√≥n identificada"

# Crear el archivo final con la nueva funci√≥n a√±adida
echo "üîÑ A√±adiendo la nueva funci√≥n..."

# Copiar desde el inicio hasta el punto de inserci√≥n
head -n $END_LINE "$TEMP_DIR/app_modified.py" > "$NEW_APP_FILE"

# A√±adir la nueva funci√≥n ui_export_options_redise√±ado
echo "" >> "$NEW_APP_FILE"  # A√±adir l√≠nea en blanco
cat "$TEMP_DIR/ui_export_options_redise√±ado.py" >> "$NEW_APP_FILE"
echo "" >> "$NEW_APP_FILE"  # A√±adir l√≠nea en blanco

# A√±adir el resto del archivo
tail -n +$((END_LINE + 1)) "$TEMP_DIR/app_modified.py" >> "$NEW_APP_FILE"

# Verificar que la nueva funci√≥n se a√±adi√≥ correctamente
if ! grep -q "def ui_export_options_redise√±ado" "$NEW_APP_FILE"; then
  echo "‚ùå Error: La nueva funci√≥n no se a√±adi√≥ correctamente"
  echo "Abortando script. Por favor, realiza los cambios manualmente."
  exit 1
fi

echo "‚úÖ Nueva funci√≥n a√±adida correctamente"

# Reemplazar el archivo original con el nuevo
echo "üîÑ Reemplazando el archivo original..."
cp "$NEW_APP_FILE" "$APP_FILE"

echo "‚úÖ Archivo original reemplazado correctamente"
echo ""
echo "‚ú® ¬°Soluci√≥n implementada con √©xito!"
echo ""
echo "üìã Resumen de acciones realizadas:"
echo "  - Se cre√≥ una copia de seguridad en: $BACKUP_FILE"
echo "  - Se a√±adi√≥ la nueva funci√≥n ui_export_options_redise√±ado"
echo "  - Se reemplazaron las referencias a ui_export_options_tabs"
echo ""
echo "üß™ Ahora puedes probar la aplicaci√≥n para verificar que el error ha sido solucionado."
echo "Si encuentras alg√∫n problema, puedes restaurar la copia de seguridad con:"
echo "  cp \"$BACKUP_FILE\" \"$APP_FILE\""
echo ""
echo "Para limpiar los archivos temporales, ejecuta:"
echo "  rm -rf \"$TEMP_DIR\""
echo ""
echo "¬°Gracias por utilizar este script de soluci√≥n automatizada!"
